document.addEventListener('DOMContentLoaded', function () {
    console.log('Doctor dashboard script loaded successfully');
    
    // Test buttons v√† modal availability
    setTimeout(() => {
        const testViewBtn = document.querySelector('.btn-record');
        const testSaveBtn = document.querySelector('.btn-primary[onclick*="savePatientRecord"]');
        const testModal = document.getElementById('patientModal');
        
        console.log('üîç Test results:');
        console.log('- .btn-record (Xem h·ªì s∆°) found:', !!testViewBtn);
        console.log('- .btn-primary (L∆∞u thay ƒë·ªïi) found:', !!testSaveBtn);
        console.log('- #patientModal found:', !!testModal);
        console.log('- viewPatientRecord function exists:', typeof window.viewPatientRecord);
        console.log('- savePatientRecord function exists:', typeof window.savePatientRecord);
        
        // Test patient data
        console.log('- Patient data available:', Object.keys(patientData).length + ' patients');
        console.log('- Available patient IDs:', Object.keys(patientData));
        
        // Check localStorage
        const savedKeys = Object.keys(localStorage).filter(key => key.startsWith('patientData_'));
        console.log('- Saved patient data in localStorage:', savedKeys.length);
        if (savedKeys.length > 0) {
            console.log('- Saved patient keys:', savedKeys);
        }
        console.log('üí° Tip: D√πng clearPatientData() ƒë·ªÉ x√≥a d·ªØ li·ªáu test');
    }, 1000);
    
    // ƒê·∫£m b·∫£o c√°c n√∫t ho·∫°t ƒë·ªông
    document.addEventListener('click', function(e) {
        // N√∫t "Xem h·ªì s∆°"
        if (e.target.closest('.btn-record')) {
            e.preventDefault();
            const button = e.target.closest('.btn-record');
            const onclick = button.getAttribute('onclick');
            console.log('Btn-record clicked with onclick:', onclick);
            
            // Extract patient ID from onclick attribute
            const match = onclick.match(/viewPatientRecord\('(.+?)'\)/);
            if (match) {
                const patientId = match[1];
                console.log('Extracted patient ID:', patientId);
                window.viewPatientRecord(patientId);
            }
        }
        
        // N√∫t "L∆∞u thay ƒë·ªïi"
        if (e.target.closest('.btn-primary') && e.target.closest('.btn-primary').onclick) {
            const button = e.target.closest('.btn-primary');
            const onclick = button.getAttribute('onclick');
            
            if (onclick && onclick.includes('savePatientRecord')) {
                e.preventDefault();
                console.log('Save button clicked');
                window.savePatientRecord();
            }
        }
        
        // N√∫t "ƒê√≥ng" modal
        if (e.target.closest('.btn-secondary') && e.target.closest('.btn-secondary').onclick) {
            const button = e.target.closest('.btn-secondary');
            const onclick = button.getAttribute('onclick');
            
            if (onclick && onclick.includes('closeModal')) {
                e.preventDefault();
                console.log('Close button clicked');
                window.closeModal();
            }
        }
        
        // N√∫t "In h·ªì s∆°"
        if (e.target.closest('.btn-print') && e.target.closest('.btn-print').onclick) {
            const button = e.target.closest('.btn-print');
            const onclick = button.getAttribute('onclick');
            
            if (onclick && onclick.includes('printRecord')) {
                e.preventDefault();
                console.log('Print button clicked');
                window.printRecord();
            }
        }
    });
    
    // ========== GI·ªÆ TR·∫†NG TH√ÅI ƒêƒÇNG NH·∫¨P ==========
    const authButtons = document.querySelector('.auth-buttons');
    const userMenu = document.querySelector('.user-menu');
    const userNameSpan = document.querySelector('.user-name');
    const sidebarUsername = document.querySelector('.sidebar-username');
    const notificationWrapper = document.querySelector('.notification-wrapper');

    // Hi·ªÉn th·ªã ƒë√∫ng tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi load l·∫°i trang
    const fullName = localStorage.getItem('docFullName');
    if (fullName) {
        if (authButtons) authButtons.style.display = 'none';
        if (userMenu) userMenu.style.display = 'flex';
        if (userNameSpan) userNameSpan.textContent = fullName;
        if (sidebarUsername) sidebarUsername.textContent = fullName;
        if (notificationWrapper) notificationWrapper.style.display = 'block';
    } else {
        if (authButtons) authButtons.style.display = 'flex';
        if (userMenu) userMenu.style.display = 'none';
        if (notificationWrapper) notificationWrapper.style.display = 'none';
    }

    // ========== ƒêƒÇNG XU·∫§T ==========

    const logoutBtn = document.querySelector('.logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function (e) {
            e.preventDefault();
            localStorage.clear(); // <-- S·ª≠a ·ªü ƒë√¢y, kh√¥ng c·∫ßn g·ªçi h√†m n√†o kh√°c
            window.location.href = "index.html";
        });
    }

// Patient data storage - Updated to match database schema
    const patientData = {
        mai: {
            cusId: 1,
            name: 'Nguy·ªÖn Th·ªã Mai',
            gender: 'N·ªØ',
            birthDate: '26/09/2004',
            email: 'thutase180353@fpt.edu.vn',
            phone: '0352020737',
            address: 'HCMC',
            occupation: 'Con sen',
            emergencyContact: 'M∆°',
            status: 'active',
            medicalRecord: {
                recordId: 'MR002',
                diagnosis: 'V√¥ sinh nguy√™n ph√°t, chu·∫©n b·ªã ƒëi·ªÅu tr·ªã IVF chu k·ª≥ 1',
                treatmentPlan: '1. K√≠ch th√≠ch bu·ªìng tr·ª©ng b·∫±ng thu·ªëc FSH\n2. Theo d√µi nang no√£n b·∫±ng si√™u √¢m\n3. Ch·ªçc h√∫t tr·ª©ng khi ƒë·ªß ti√™u chu·∫©n\n4. Th·ª• tinh trong ·ªëng nghi·ªám\n5. Chuy·ªÉn ph√¥i v√†o t·ª≠ cung',
                notes: 'B·ªánh nh√¢n h·ª£p t√°c t·ªët, tu√¢n th·ªß ƒëi·ªÅu tr·ªã ƒë·∫ßy ƒë·ªß',
                recordStatus: 'active',
                dischargeDate: '2024-07-24'
            },
            currentBooking: {
                bookType: 'follow-up',
                bookStatus: 'confirmed',
                note: 'B·ªánh nh√¢n ƒë·∫øn ƒë√∫ng gi·ªù h·∫πn',
                serviceName: 'Li·ªáu tr√¨nh ƒëi·ªÅu tr·ªã IVF'
            }
        },
        an: {
            cusId: 2,
            name: 'Tr·∫ßn VƒÉn An',
            gender: 'Nam',
            birthDate: '15/03/1989',
            email: 'tranan@gmail.com',
            phone: '0987654321',
            address: 'C·∫ßu Gi·∫•y, H√† N·ªôi',
            occupation: 'K·ªπ s∆∞',
            emergencyContact: 'V·ª£ - Nguy·ªÖn Th·ªã Lan',
            status: 'active',
            medicalRecord: {
                recordId: 'MR003',
                diagnosis: 'T∆∞ v·∫•n hi·∫øm mu·ªôn l·∫ßn ƒë·∫ßu',
                treatmentPlan: 'T∆∞ v·∫•n ch·∫ø ƒë·ªô sinh ho·∫°t, dinh d∆∞·ª°ng. H·∫πn kh√°m l·∫°i sau 3 th√°ng',
                notes: 'C·∫ßn theo d√µi th√™m, c√≥ th·ªÉ c·∫ßn l√†m th√™m x√©t nghi·ªám',
                recordStatus: 'active',
                dischargeDate: '2024-09-24'
            },
            currentBooking: {
                bookType: 'initial',
                bookStatus: 'confirmed',
                note: 'L·∫ßn ƒë·∫ßu t∆∞ v·∫•n',
                serviceName: 'T∆∞ v·∫•n hi·∫øm mu·ªôn'
            }
        },
        hoa: {
            cusId: 3,
            name: 'Ph·∫°m Th·ªã Hoa',
            gender: 'N·ªØ',
            birthDate: '20/07/1994',
            email: 'phamhoa@gmail.com',
            phone: '0456789123',
            address: 'Thanh Xu√¢n, H√† N·ªôi',
            occupation: 'Gi√°o vi√™n',
            emergencyContact: 'Ch·ªìng - L√™ VƒÉn Minh',
            status: 'active',
            medicalRecord: {
                recordId: 'MR004',
                diagnosis: 'IVF - theo d√µi k√≠ch th√≠ch bu·ªìng tr·ª©ng',
                treatmentPlan: 'Ti√™m Gonal-F 225UI/ng√†y, si√™u √¢m theo d√µi',
                notes: 'Ph·∫£n ·ª©ng t·ªët v·ªõi thu·ªëc k√≠ch th√≠ch, d·ª± ki·∫øn ch·ªçc h√∫t sau 2 ng√†y',
                recordStatus: 'active',
                dischargeDate: '2024-08-15'
            },
            currentBooking: {
                bookType: 'follow-up',
                bookStatus: 'confirmed',
                note: 'Theo d√µi k√≠ch th√≠ch bu·ªìng tr·ª©ng',
                serviceName: 'Li·ªáu tr√¨nh ƒëi·ªÅu tr·ªã IVF'
            }
        },
        lan: {
            cusId: 4,
            name: 'L√™ Th·ªã Lan',
            gender: 'N·ªØ',
            birthDate: '10/12/1991',
            email: 'lethilan@gmail.com',
            phone: '0789123456',
            address: 'ƒê·ªëng ƒêa, H√† N·ªôi',
            occupation: 'K·∫ø to√°n',
            emergencyContact: 'Ch·ªìng - Tr·∫ßn VƒÉn H√πng',
            status: 'active',
            medicalRecord: {
                recordId: 'MR005',
                diagnosis: 'IVF chu k·ª≥ 2 - chu·∫©n b·ªã chuy·ªÉn ph√¥i',
                treatmentPlan: 'Chu·∫©n b·ªã n·ªôi m·∫°c t·ª≠ cung, h·∫πn chuy·ªÉn ph√¥i',
                notes: 'N·ªôi m·∫°c t·ª≠ cung d√†y 9mm, ph√π h·ª£p chuy·ªÉn ph√¥i',
                recordStatus: 'active',
                dischargeDate: '2024-08-20'
            },
            currentBooking: {
                bookType: 'follow-up',
                bookStatus: 'confirmed',
                note: 'Chu·∫©n b·ªã chuy·ªÉn ph√¥i',
                serviceName: 'Li·ªáu tr√¨nh ƒëi·ªÅu tr·ªã IVF'
            }
        },
        thu: {
            cusId: 5,
            name: 'Ho√†ng Th·ªã Thu',
            gender: 'N·ªØ',
            birthDate: '25/04/1995',
            email: 'hoangthu@gmail.com',
            phone: '0345678901',
            address: 'Ba ƒê√¨nh, H√† N·ªôi',
            occupation: 'Y t√°',
            emergencyContact: 'Ch·ªìng - Nguy·ªÖn VƒÉn D≈©ng',
            status: 'active',
            medicalRecord: {
                recordId: 'MR006',
                diagnosis: 'Theo d√µi sau ph·∫´u thu·∫≠t n·ªôi soi',
                treatmentPlan: 'Theo d√µi l√†nh v·∫øt th∆∞∆°ng, t∆∞ v·∫•n th·ªùi gian c√≥ thai',
                notes: 'V·∫øt th∆∞∆°ng l√†nh t·ªët, c√≥ th·ªÉ chu·∫©n b·ªã c√≥ thai sau 3 th√°ng',
                recordStatus: 'active',
                dischargeDate: '2024-09-14'
            },
            currentBooking: {
                bookType: 'follow-up',
                bookStatus: 'confirmed',
                note: 'Ki·ªÉm tra sau ph·∫´u thu·∫≠t',
                serviceName: 'Kh√°m theo d√µi sau ph·∫´u thu·∫≠t'
            }
        }
    };

// Remove old modal functions - will be redefined later to match database structure



// Patient List Modal functions
    window.openPatientList = function() {
        document.getElementById('patientListModal').style.display = 'block';
    };

    window.closePatientListModal = function() {
        document.getElementById('patientListModal').style.display = 'none';
    };

    window.editPatientFromList = function(patientId) {
        window.closePatientListModal();
        window.viewPatientRecord(patientId);
    };

    window.searchPatients = function() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const tableBody = document.getElementById('patientTableBody');
        const rows = tableBody.getElementsByTagName('tr');

        for (let i = 0; i < rows.length; i++) {
            const patientName = rows[i].getElementsByTagName('td')[0].textContent.toLowerCase();
            if (patientName.includes(searchTerm)) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }
    };



// Close modal when clicking outside
    window.onclick = function(event) {
        const patientModal = document.getElementById('patientModal');
        const patientListModal = document.getElementById('patientListModal');

        if (event.target === patientModal) {
            window.closeModal();
        }
        if (event.target === patientListModal) {
            window.closePatientListModal();
        }
    }


    function updateCurrentTime() {
        const now = new Date();
        const options = {
            weekday: 'long',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        };
        const dateString = now.toLocaleDateString('vi-VN', options);

        const currentDateElement = document.querySelector('.current-date');
        if (currentDateElement) {
            currentDateElement.textContent = dateString;
        }
    }

// Enhanced patient search with debouncing
    let searchTimeout;
    const originalSearchPatients = searchPatients;

    searchPatients = function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(originalSearchPatients, 300);
    };

    // ========== PATIENT STATUS MANAGEMENT ==========
    
    // Mark patient as examined
    window.markAsExamined = function(patientId) {
        const appointmentItem = document.querySelector(`[data-patient="${patientId}"]`);
        if (!appointmentItem) return;
        
        // Update status
        appointmentItem.setAttribute('data-status', 'examined');
        
        // Update status badge
        const statusBadge = appointmentItem.querySelector('.status-badge');
        statusBadge.textContent = 'ƒê√£ kh√°m';
        statusBadge.className = 'status-badge completed';
        
        // Update action button
        const actionDiv = appointmentItem.querySelector('.appointment-actions');
        actionDiv.innerHTML = `
            <button class="btn-record" onclick="window.viewPatientRecord('${patientId}')">
                <i class="fas fa-file-medical"></i> Xem h·ªì s∆°
            </button>
        `;
        
        // Show success notification
        if (typeof showNotification === 'function') {
            showNotification(`ƒê√£ check-in b·ªánh nh√¢n th√†nh c√¥ng`, 'success');
        }
    };
    


    // ========== MODAL TAB MANAGEMENT ==========
    
    // Switch tabs in patient record modal
    window.switchTab = function(tabName) {
        // Remove active class from all tabs and contents
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Add active class to clicked tab
        event.target.classList.add('active');
        
        // Show corresponding content
        const tabContentId = tabName + 'Tab';
        const tabContent = document.getElementById(tabContentId);
        if (tabContent) {
            tabContent.classList.add('active');
        }
    };
    
    // Print patient record
    window.printRecord = function() {
        const patientName = document.getElementById('patientName').textContent;
        
        // Create printable content
        const printContent = `
            <html>
            <head>
                <title>H·ªì s∆° b·ªánh √°n - ${patientName}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .header { text-align: center; margin-bottom: 20px; }
                    .section { margin-bottom: 15px; }
                    .label { font-weight: bold; }
                    textarea { width: 100%; min-height: 80px; border: 1px solid #ccc; padding: 8px; }
                </style>
            </head>
            <body>
                <div class="header">
                    <h2>H·ªí S∆† B·ªÜNH √ÅN</h2>
                    <h3>${patientName}</h3>
                    <p>Ng√†y in: ${new Date().toLocaleDateString('vi-VN')}</p>
                </div>
                
                <div class="section">
                    <div class="label">L√Ω do kh√°m:</div>
                    <p>${document.getElementById('visitReason').value}</p>
                </div>
                
                <div class="section">
                    <div class="label">Tri·ªáu ch·ª©ng:</div>
                    <p>${document.getElementById('currentSymptoms').value}</p>
                </div>
                
                <div class="section">
                    <div class="label">Ch·∫©n ƒëo√°n:</div>
                    <p>${document.getElementById('diagnosis').value}</p>
                </div>
                
                <div class="section">
                    <div class="label">K√™ ƒë∆°n thu·ªëc:</div>
                    <p style="white-space: pre-line;">${document.getElementById('prescription').value}</p>
                </div>
                
                <div class="section">
                    <div class="label">H∆∞·ªõng d·∫´n:</div>
                    <p>${document.getElementById('instructions').value}</p>
                </div>
                
                <div class="section">
                    <div class="label">Ghi ch√∫ c·ªßa b√°c sƒ©:</div>
                    <p>${document.getElementById('doctorNotes').value}</p>
                </div>
                
                <div style="margin-top: 40px; text-align: right;">
                    <p>B√°c sƒ© ƒëi·ªÅu tr·ªã</p>
                    <br><br>
                    <p>_________________</p>
                </div>
            </body>
            </html>
        `;
        
        // Open print window
        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.print();
    };

    // Update viewPatientRecord function to work with new database-matching structure
    window.viewPatientRecord = function(patientId) {
        console.log('üëÄ M·ªü h·ªì s∆° b·ªánh nh√¢n ID:', patientId);
        
        let patient = patientData[patientId];
        
        if (!patient) {
            console.error('Patient not found with ID:', patientId);
            alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n!');
            return;
        }
        
        // Load d·ªØ li·ªáu ƒë√£ l∆∞u t·ª´ localStorage n·∫øu c√≥
        const savedData = loadPatientDataFromStorage(patientId);
        if (savedData) {
            console.log('üìÇ S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u');
            patient = savedData;
            // C·∫≠p nh·∫≠t l·∫°i patientData v·ªõi d·ªØ li·ªáu m·ªõi
            patientData[patientId] = patient;
        }
        
        console.log('Patient data:', patient);

        // Update basic patient info - safely check if elements exist
        const patientNameEl = document.getElementById('patientName');
        const patientIdEl = document.getElementById('patientId');
        const patientGenderEl = document.getElementById('patientGender');
        const patientBirthDateEl = document.getElementById('patientBirthDate');
        const patientPhoneEl = document.getElementById('patientPhone');
        const patientEmailEl = document.getElementById('patientEmail');
        const patientAddressEl = document.getElementById('patientAddress');
        const patientOccupationEl = document.getElementById('patientOccupation');
        const emergencyContactEl = document.getElementById('emergencyContact');
        const patientStatusEl = document.getElementById('patientStatus');
        
        if (patientNameEl) patientNameEl.textContent = patient.name;
        if (patientIdEl) patientIdEl.textContent = 'BN' + String(patient.cusId).padStart(3, '0');
        if (patientGenderEl) patientGenderEl.textContent = patient.gender;
        if (patientBirthDateEl) patientBirthDateEl.textContent = patient.birthDate;
        if (patientPhoneEl) patientPhoneEl.textContent = patient.phone;
        if (patientEmailEl) patientEmailEl.textContent = patient.email;
        if (patientAddressEl) patientAddressEl.textContent = patient.address;
        if (patientOccupationEl) patientOccupationEl.textContent = patient.occupation;
        if (emergencyContactEl) emergencyContactEl.textContent = patient.emergencyContact;
        if (patientStatusEl) patientStatusEl.textContent = patient.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông';
        
        // Update current status
        const appointmentItem = document.querySelector(`[data-patient="${patientId}"]`);
        const statusBadge = appointmentItem ? appointmentItem.querySelector('.status-badge') : null;
        const currentStatus = statusBadge ? statusBadge.textContent : 'Kh√¥ng x√°c ƒë·ªãnh';
        document.getElementById('currentStatus').textContent = currentStatus;
        document.getElementById('currentStatus').className = 'status-badge ' + 
            (currentStatus === 'ƒê√£ kh√°m' ? 'completed' : 'waiting');

        // Update booking information
        if (patient.currentBooking) {
            document.getElementById('bookType').value = patient.currentBooking.bookType;
            document.getElementById('bookStatus').value = patient.currentBooking.bookStatus;
            document.getElementById('bookingNote').value = patient.currentBooking.note;
        }

        // Update medical record information
        if (patient.medicalRecord) {
            document.getElementById('recordStatus').value = patient.medicalRecord.recordStatus;
            document.getElementById('recordCreatedDate').value = '2024-06-24';
            document.getElementById('diagnosis').value = patient.medicalRecord.diagnosis;
            document.getElementById('treatmentPlan').value = patient.medicalRecord.treatmentPlan;
            document.getElementById('dischargeDate').value = patient.medicalRecord.dischargeDate;
            document.getElementById('medicalNote').value = patient.medicalRecord.notes;
        }

        // Update booking step information (sample data) - only if elements exist
        const performedAt1 = document.getElementById('performedAt1');
        const stepResult1 = document.getElementById('stepResult1');
        const stepNote1 = document.getElementById('stepNote1');
        
        if (performedAt1) performedAt1.value = '2024-06-24T08:00';
        if (stepResult1) stepResult1.value = 'T√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng th·ªÉ t·ªët';
        if (stepNote1) stepNote1.value = 'B·ªánh nh√¢n c√≥ ti·ªÅn s·ª≠ s·∫£y thai 1 l·∫ßn';

        // Update drug information (sample data) - only if elements exist
        const drugName1 = document.getElementById('drugName1');
        const dosage1 = document.getElementById('dosage1');
        const frequency1 = document.getElementById('frequency1');
        const duration1 = document.getElementById('duration1');
        const drugNote1 = document.getElementById('drugNote1');
        
        if (drugName1) drugName1.value = 'Folic Acid';
        if (dosage1) dosage1.value = '5mg';
        if (frequency1) frequency1.value = '1 l·∫ßn/ng√†y';
        if (duration1) duration1.value = '30 ng√†y';
        if (drugNote1) drugNote1.value = 'U·ªëng sau b·ªØa ƒÉn';

        // Reset to first tab
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        document.querySelector('.tab-btn').classList.add('active');
        document.getElementById('currentTab').classList.add('active');

        // Show modal
        const patientModal = document.getElementById('patientModal');
        if (patientModal) {
            patientModal.style.display = 'block';
            patientModal.dataset.patientId = patientId;
            console.log('Modal shown successfully');
        } else {
            console.error('Patient modal not found!');
            alert('Kh√¥ng th·ªÉ hi·ªÉn th·ªã modal b·ªánh nh√¢n!');
        }
    };

    // Update close modal functions
    window.closeModal = function() {
        document.getElementById('patientModal').style.display = 'none';
    };
    
    window.savePatientRecord = function() {
        console.log('üíæ L∆∞u h·ªì s∆° b·ªánh nh√¢n (tƒ©nh)');
        
        const patientModal = document.getElementById('patientModal');
        if (!patientModal) {
            alert('Kh√¥ng t√¨m th·∫•y modal b·ªánh nh√¢n!');
            return;
        }
        
        const patientId = patientModal.dataset.patientId;
        const patient = patientData[patientId];
        
        if (!patient) {
            alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n!');
            return;
        }

        try {
            // Update booking information
            const bookType = document.getElementById('bookType');
            const bookStatus = document.getElementById('bookStatus');
            const bookingNote = document.getElementById('bookingNote');
            
            if (patient.currentBooking) {
                if (bookType) patient.currentBooking.bookType = bookType.value;
                if (bookStatus) patient.currentBooking.bookStatus = bookStatus.value;
                if (bookingNote) patient.currentBooking.note = bookingNote.value;
            }

            // Update medical record information
            const recordStatus = document.getElementById('recordStatus');
            const diagnosis = document.getElementById('diagnosis');
            const treatmentPlan = document.getElementById('treatmentPlan');
            const dischargeDate = document.getElementById('dischargeDate');
            const medicalNote = document.getElementById('medicalNote');
            
            if (patient.medicalRecord) {
                if (recordStatus) patient.medicalRecord.recordStatus = recordStatus.value;
                if (diagnosis) patient.medicalRecord.diagnosis = diagnosis.value;
                if (treatmentPlan) patient.medicalRecord.treatmentPlan = treatmentPlan.value;
                if (dischargeDate) patient.medicalRecord.dischargeDate = dischargeDate.value;
                if (medicalNote) patient.medicalRecord.notes = medicalNote.value;
            }

            // Save booking steps 
            const completedSteps = [];
            const stepItems = document.querySelectorAll('#completedStepsList .step-item');
            stepItems.forEach(item => {
                const stepName = item.querySelector('.step-info strong').textContent;
                const stepTime = item.querySelector('.step-time').textContent;
                const stepStatus = item.querySelector('.step-status').textContent;
                const stepResult = item.querySelector('.step-summary p:first-child').textContent.replace('K·∫øt qu·∫£: ', '');
                const stepNote = item.querySelector('.step-summary p:last-child').textContent.replace('Ghi ch√∫: ', '');
                
                completedSteps.push({
                    name: stepName,
                    time: stepTime,
                    status: stepStatus,
                    result: stepResult,
                    note: stepNote
                });
            });

            // Save drug information
            const drugs = [];
            const drugItems = document.querySelectorAll('#drugsList .drug-item');
            drugItems.forEach((item, index) => {
                const drugNameInput = item.querySelector('input[placeholder*="T√™n thu·ªëc"], #drugName' + (index + 1));
                const dosageInput = item.querySelector('input[placeholder*="Li·ªÅu"], #dosage' + (index + 1));
                const frequencyInput = item.querySelector('input[placeholder*="T·∫ßn su·∫•t"], #frequency' + (index + 1));
                const durationInput = item.querySelector('input[placeholder*="Th·ªùi gian"], #duration' + (index + 1));
                const noteTextarea = item.querySelector('textarea, #drugNote' + (index + 1));
                
                drugs.push({
                    name: drugNameInput ? drugNameInput.value : '',
                    dosage: dosageInput ? dosageInput.value : '',
                    frequency: frequencyInput ? frequencyInput.value : '',
                    duration: durationInput ? durationInput.value : '',
                    note: noteTextarea ? noteTextarea.value : ''
                });
            });

            // Update patient data trong memory
            patient.lastUpdated = new Date().toISOString();
            patient.bookingSteps = completedSteps;
            patient.drugs = drugs;

            // L∆∞u v√†o localStorage ƒë·ªÉ persist
            localStorage.setItem('patientData_' + patientId, JSON.stringify(patient));
            
            console.log('‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng:', {
                patient: patient.name,
                steps: completedSteps.length,
                drugs: drugs.length,
                time: new Date().toLocaleString('vi-VN')
            });

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒë∆°n gi·∫£n
            alert(`‚úÖ ƒê√£ l∆∞u h·ªì s∆° c·ªßa ${patient.name}!\nüìã ${completedSteps.length} b∆∞·ªõc ƒëi·ªÅu tr·ªã\nüíä ${drugs.length} lo·∫°i thu·ªëc`);
            
            // ƒê√≥ng modal
            window.closeModal();

        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u:', error);
            alert('‚ùå C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu: ' + error.message);
        }
    };

    // Th√™m function ƒë·ªÉ load d·ªØ li·ªáu t·ª´ localStorage khi c·∫ßn
    function loadPatientDataFromStorage(patientId) {
        const savedData = localStorage.getItem('patientData_' + patientId);
        if (savedData) {
            try {
                const parsedData = JSON.parse(savedData);
                console.log('üìÇ Loaded patient data from localStorage:', parsedData);
                return parsedData;
            } catch (error) {
                console.error('‚ùå Error parsing saved data:', error);
            }
        }
        return null;
    }

    // Function ƒë·ªÉ clear d·ªØ li·ªáu test (c√≥ th·ªÉ g·ªçi t·ª´ console)
    window.clearPatientData = function(patientId) {
        if (patientId) {
            localStorage.removeItem('patientData_' + patientId);
            console.log('üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu c·ªßa b·ªánh nh√¢n:', patientId);
        } else {
            // Clear t·∫•t c·∫£ patient data
            Object.keys(localStorage).forEach(key => {
                if (key.startsWith('patientData_')) {
                    localStorage.removeItem(key);
                }
            });
            console.log('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu b·ªánh nh√¢n');
        }
    };

    // Additional utility functions for sidebar
    // openScheduleManager function is already defined in doctor-common.js
    // Removed duplicate definition to avoid conflicts

    window.openReports = function() {
        if (typeof showNotification === 'function') {
            showNotification('T√≠nh nƒÉng b√°o c√°o th·ªëng k√™ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
        }
    };

    // ========== NEW FUNCTIONS FOR DATABASE MATCHING ========== 

    // Add new booking step
    window.addBookingStep = function() {
        const stepsList = document.getElementById('bookingStepsList');
        const stepCount = stepsList.children.length + 1;
        
        const newStep = document.createElement('div');
        newStep.className = 'step-item';
        newStep.innerHTML = `
            <div class="step-header">
                <strong>B∆∞·ªõc ${stepCount}: </strong>
                <input type="text" placeholder="T√™n b∆∞·ªõc..." style="flex: 1; margin: 0 1rem;">
                <span class="step-status completed">ƒêang th·ª±c hi·ªán</span>
            </div>
            <div class="step-content">
                <div class="record-grid">
                    <div class="record-section">
                        <label>Ng√†y th·ª±c hi·ªán:</label>
                        <input type="datetime-local" value="${new Date().toISOString().slice(0, 16)}">
                    </div>
                    <div class="record-section">
                        <label>K·∫øt qu·∫£:</label>
                        <textarea rows="2" placeholder="K·∫øt qu·∫£ th·ª±c hi·ªán..."></textarea>
                    </div>
                </div>
                <div class="record-section">
                    <label>Ghi ch√∫ b∆∞·ªõc n√†y:</label>
                    <textarea rows="2" placeholder="Ghi ch√∫ c·ªßa b√°c sƒ©..."></textarea>
                </div>
                <button type="button" class="btn-remove-drug" onclick="removeBookingStep(this)">
                    <i class="fas fa-trash"></i> X√≥a b∆∞·ªõc
                </button>
            </div>
        `;
        
        stepsList.appendChild(newStep);
    };

    // Remove booking step
    window.removeBookingStep = function(button) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b∆∞·ªõc n√†y?')) {
            button.closest('.step-item').remove();
        }
    };

    // Add new drug
    window.addDrug = function() {
        const drugsList = document.getElementById('drugsList');
        const drugCount = drugsList.children.length + 1;
        
        const newDrug = document.createElement('div');
        newDrug.className = 'drug-item';
        newDrug.innerHTML = `
            <div class="record-grid">
                <div class="record-section">
                    <label>T√™n thu·ªëc:</label>
                    <input type="text" placeholder="T√™n thu·ªëc...">
                </div>
                <div class="record-section">
                    <label>Li·ªÅu d√πng:</label>
                    <input type="text" placeholder="Li·ªÅu d√πng...">
                </div>
            </div>
            <div class="record-grid">
                <div class="record-section">
                    <label>T·∫ßn su·∫•t:</label>
                    <input type="text" placeholder="T·∫ßn su·∫•t s·ª≠ d·ª•ng...">
                </div>
                <div class="record-section">
                    <label>Th·ªùi gian d√πng:</label>
                    <input type="text" placeholder="Th·ªùi gian d√πng...">
                </div>
            </div>
            <div class="record-section">
                <label>Ghi ch√∫ thu·ªëc:</label>
                <textarea rows="2" placeholder="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng..."></textarea>
            </div>
            <button type="button" class="btn-remove-drug" onclick="removeDrug(this)">
                <i class="fas fa-trash"></i> X√≥a
            </button>
        `;
        
        drugsList.appendChild(newDrug);
    };

    // Remove drug
    window.removeDrug = function(button) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a thu·ªëc n√†y?')) {
            button.closest('.drug-item').remove();
        }
    };

    // ========== EDITABLE TEST RESULTS FUNCTIONS ==========

    // Add new test item
    window.addNewTestItem = function() {
        const testContainer = document.querySelector('.booking-steps-results');
        const testCount = testContainer.children.length + 1;
        
        const newTestItem = document.createElement('div');
        newTestItem.className = 'step-result-item';
        newTestItem.innerHTML = `
            <div class="step-result-header">
                <div class="step-info">
                    <h6 contenteditable="true" class="editable-title">X√©t nghi·ªám m·ªõi ${testCount}</h6>
                    <input type="datetime-local" class="editable-date" value="${new Date().toISOString().slice(0, 16)}">
                </div>
                <select class="step-status-select">
                    <option value="pending" selected>ƒêang ch·ªù</option>
                    <option value="completed">Ho√†n th√†nh</option>
                    <option value="cancelled">ƒê√£ h·ªßy</option>
                </select>
            </div>
            <div class="step-result-content">
                <div class="result-grid">
                    <div class="result-item">
                        <input type="text" class="editable-label" value="Ch·ªâ s·ªë 1" placeholder="T√™n ch·ªâ s·ªë">:
                        <input type="text" class="editable-result" value="" placeholder="Gi√° tr·ªã">
                        <select class="unit-select">
                            <option value="mg/ml">mg/ml</option>
                            <option value="mIU/ml">mIU/ml</option>
                            <option value="ng/ml">ng/ml</option>
                            <option value="pg/ml">pg/ml</option>
                            <option value="tri·ªáu/ml">tri·ªáu/ml</option>
                            <option value="%">%</option>
                        </select>
                        <select class="status-select">
                            <option value="B√¨nh th∆∞·ªùng" selected>B√¨nh th∆∞·ªùng</option>
                            <option value="Cao">Cao</option>
                            <option value="Th·∫•p">Th·∫•p</option>
                            <option value="B·∫•t th∆∞·ªùng">B·∫•t th∆∞·ªùng</option>
                        </select>
                        <button type="button" class="remove-test-item-btn" onclick="removeTestResultItem(this)">
                            <i class="fas fa-trash"></i> X√≥a
                        </button>
                    </div>
                </div>
                <button type="button" class="add-test-item-btn" onclick="addTestResultRow(this)" style="margin-top: 8px; padding: 8px 16px; font-size: 0.8rem;">
                    <i class="fas fa-plus"></i> Th√™m ch·ªâ s·ªë
                </button>
                <div class="result-note">
                    <strong>Ghi ch√∫:</strong> 
                    <textarea class="editable-note" placeholder="Nh·∫≠p ghi ch√∫..."></textarea>
                </div>
                <button type="button" class="remove-test-item-btn" onclick="removeTestItem(this)" style="margin-top: 16px;">
                    <i class="fas fa-trash"></i> X√≥a to√†n b·ªô x√©t nghi·ªám
                </button>
            </div>
        `;
        
        testContainer.appendChild(newTestItem);
        
        // Show notification
        if (typeof showNotification === 'function') {
            showNotification('ƒê√£ th√™m x√©t nghi·ªám m·ªõi!', 'success');
        }
    };

    // Add test result row to existing test
    window.addTestResultRow = function(button) {
        const resultGrid = button.parentElement.querySelector('.result-grid');
        
        const newResultItem = document.createElement('div');
        newResultItem.className = 'result-item';
        newResultItem.innerHTML = `
            <input type="text" class="editable-label" value="Ch·ªâ s·ªë m·ªõi" placeholder="T√™n ch·ªâ s·ªë">:
            <input type="text" class="editable-result" value="" placeholder="Gi√° tr·ªã">
            <select class="unit-select">
                <option value="mg/ml">mg/ml</option>
                <option value="mIU/ml">mIU/ml</option>
                <option value="ng/ml">ng/ml</option>
                <option value="pg/ml">pg/ml</option>
                <option value="tri·ªáu/ml">tri·ªáu/ml</option>
                <option value="%">%</option>
            </select>
            <select class="status-select">
                <option value="B√¨nh th∆∞·ªùng" selected>B√¨nh th∆∞·ªùng</option>
                <option value="Cao">Cao</option>
                <option value="Th·∫•p">Th·∫•p</option>
                <option value="B·∫•t th∆∞·ªùng">B·∫•t th∆∞·ªùng</option>
            </select>
            <button type="button" class="remove-test-item-btn" onclick="removeTestResultItem(this)">
                <i class="fas fa-trash"></i> X√≥a
            </button>
        `;
        
        resultGrid.appendChild(newResultItem);
    };

    // Remove individual test result item
    window.removeTestResultItem = function(button) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch·ªâ s·ªë n√†y?')) {
            button.closest('.result-item').remove();
        }
    };

    // Remove entire test item
    window.removeTestItem = function(button) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô x√©t nghi·ªám n√†y?')) {
            button.closest('.step-result-item').remove();
            if (typeof showNotification === 'function') {
                showNotification('ƒê√£ x√≥a x√©t nghi·ªám!', 'info');
            }
        }
    };

    // Save all test results
    window.saveAllTestResults = function() {
        const testItems = document.querySelectorAll('.step-result-item');
        const results = [];
        
        testItems.forEach(item => {
            const title = item.querySelector('.editable-title').textContent;
            const date = item.querySelector('.editable-date').value;
            const status = item.querySelector('.step-status-select').value;
            const note = item.querySelector('.editable-note').value;
            
            const resultItems = [];
            item.querySelectorAll('.result-item').forEach(resultItem => {
                const label = resultItem.querySelector('.editable-label').value;
                const value = resultItem.querySelector('.editable-result').value;
                const unit = resultItem.querySelector('.unit-select').value;
                const resultStatus = resultItem.querySelector('.status-select').value;
                
                resultItems.push({ label, value, unit, status: resultStatus });
            });
            
            results.push({ title, date, status, note, results: resultItems });
        });
        
        console.log('Saving test results:', results);
        
        // Here you would send data to backend
        // Example: saveTestResultsToAPI(results);
        
        if (typeof showNotification === 'function') {
            showNotification('ƒê√£ l∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ x√©t nghi·ªám!', 'success');
        } else {
            alert('ƒê√£ l∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ x√©t nghi·ªám!');
        }
    };

    // Auto-save functionality
    let saveTimeout;
    document.addEventListener('input', function(e) {
        if (e.target.matches('.editable-title, .editable-date, .editable-result, .editable-label, .editable-note, .step-status-select, .unit-select, .status-select, .result-value-select, .editable-detailed-result')) {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(() => {
                // Auto-save after 2 seconds of no input
                console.log('Auto-saving changes...');
                // You can implement auto-save to backend here
            }, 2000);
        }
    });

    // Service Selection and Step Form Functions
    const serviceSelect = document.getElementById('serviceSelect');
    const stepForm = document.getElementById('stepForm');
    const selectedServiceTitle = document.getElementById('selectedServiceTitle');

    const serviceNames = {
        'clinical-exam': 'Kh√°m l√¢m s√†ng t·ªïng qu√°t',
        'blood-test': 'X√©t nghi·ªám m√°u',
        'hormone-test': 'X√©t nghi·ªám n·ªôi ti·∫øt t·ªë',
        'ultrasound': 'Si√™u √¢m',
        'egg-retrieval': 'Ch·ªçc h√∫t tr·ª©ng',
        'embryo-transfer': 'Chuy·ªÉn ph√¥i',
        'pregnancy-test': 'X√©t nghi·ªám thai',
        'consultation': 'T∆∞ v·∫•n v√† theo d√µi',
        'medication': 'K√™ ƒë∆°n thu·ªëc',
        'follow-up': 'T√°i kh√°m'
    };

    if (serviceSelect) {
        serviceSelect.addEventListener('change', function() {
            const selectedService = this.value;
            
            if (selectedService) {
                const serviceName = serviceNames[selectedService];
                selectedServiceTitle.innerHTML = `<i class="fas fa-edit"></i> Th·ª±c hi·ªán: ${serviceName}`;
                stepForm.style.display = 'block';
                
                // Set current datetime
                const now = new Date();
                const currentDateTime = now.toISOString().slice(0, 16);
                document.getElementById('performedAt').value = currentDateTime;
                
                // Clear form
                document.getElementById('stepResult').value = '';
                document.getElementById('stepNote').value = '';
                document.getElementById('stepStatus').value = 'in-progress';
            } else {
                stepForm.style.display = 'none';
            }
        });
    }

    window.saveBookingStep = function() {
        const serviceSelect = document.getElementById('serviceSelect');
        const performedAt = document.getElementById('performedAt').value;
        const stepStatus = document.getElementById('stepStatus').value;
        const stepResult = document.getElementById('stepResult').value;
        const stepNote = document.getElementById('stepNote').value;
        
        if (!serviceSelect.value || !performedAt || !stepResult) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!');
            return;
        }
        
        const serviceName = serviceNames[serviceSelect.value];
        const dateTime = new Date(performedAt);
        const formattedDateTime = `${dateTime.getDate().toString().padStart(2, '0')}/${(dateTime.getMonth() + 1).toString().padStart(2, '0')}/${dateTime.getFullYear()} ${dateTime.getHours().toString().padStart(2, '0')}:${dateTime.getMinutes().toString().padStart(2, '0')}`;
        
        const statusClass = stepStatus === 'completed' ? 'completed' : 'pending';
        const statusText = {
            'in-progress': 'ƒêang th·ª±c hi·ªán',
            'completed': 'ƒê√£ ho√†n th√†nh',
            'postponed': 'Ho√£n l·∫°i',
            'cancelled': 'H·ªßy b·ªè'
        }[stepStatus];
        
        // Create new step item
        const stepsList = document.getElementById('completedStepsList');
        const newStepId = Date.now(); // Use timestamp as ID
        
        // Remove existing step if editing
        if (window.currentEditingStepId) {
            const oldStepItem = document.querySelector(`[data-step-id="${window.currentEditingStepId}"]`);
            if (oldStepItem) {
                oldStepItem.remove();
            }
            window.currentEditingStepId = null;
        }
        
        const newStepItem = document.createElement('div');
        newStepItem.className = `step-item ${statusClass}`;
        newStepItem.setAttribute('data-step-id', newStepId);
        
        newStepItem.innerHTML = `
            <div class="step-header">
                <div class="step-info">
                    <strong>${serviceName}</strong>
                    <span class="step-time">${formattedDateTime}</span>
                </div>
                <div class="step-actions">
                    <span class="step-status ${statusClass}">${statusText}</span>
                    <button class="btn-edit-step" onclick="editStep(${newStepId})">
                        <i class="fas fa-edit"></i>
                    </button>
                </div>
            </div>
            <div class="step-summary">
                <p><strong>K·∫øt qu·∫£:</strong> ${stepResult}</p>
                <p><strong>Ghi ch√∫:</strong> ${stepNote}</p>
            </div>
        `;
        
        // Insert at the beginning of the list
        stepsList.insertBefore(newStepItem, stepsList.firstChild);
        
        // Clear and hide form
        cancelStepForm();
        
        alert('ƒê√£ l∆∞u b∆∞·ªõc th·ª±c hi·ªán th√†nh c√¥ng!');
    };

    window.cancelStepForm = function() {
        stepForm.style.display = 'none';
        serviceSelect.value = '';
        document.getElementById('stepResult').value = '';
        document.getElementById('stepNote').value = '';
        document.getElementById('stepStatus').value = 'in-progress';
        window.currentEditingStepId = null;
    };

    window.editStep = function(stepId) {
        const stepItem = document.querySelector(`[data-step-id="${stepId}"]`);
        if (stepItem) {
            const stepInfo = stepItem.querySelector('.step-info strong').textContent;
            const stepResult = stepItem.querySelector('.step-summary p:first-child').textContent.replace('K·∫øt qu·∫£: ', '');
            const stepNote = stepItem.querySelector('.step-summary p:last-child').textContent.replace('Ghi ch√∫: ', '');
            
            // Find the service key by name
            let serviceKey = '';
            for (const [key, name] of Object.entries(serviceNames)) {
                if (name === stepInfo) {
                    serviceKey = key;
                    break;
                }
            }
            
            // Populate form with existing data
            serviceSelect.value = serviceKey;
            selectedServiceTitle.innerHTML = `<i class="fas fa-edit"></i> Ch·ªânh s·ª≠a: ${stepInfo}`;
            document.getElementById('stepResult').value = stepResult;
            document.getElementById('stepNote').value = stepNote;
            
            // Show form
            stepForm.style.display = 'block';
            
            // Store editing step ID for later removal
            window.currentEditingStepId = stepId;
        }
    };

    // ========== PRESCRIPTION TAB FUNCTIONS ==========

    // Drug counter for unique IDs
    let drugCounter = 2; // Start from 2 since we have drug1 and drug2 pre-loaded
    
    // Override addDrug function for prescription tab
    window.addDrugPrescription = function() {
        drugCounter++;
        const drugsList = document.getElementById('drugsList');
        if (!drugsList) {
            console.error('drugsList element not found');
            return;
        }
        
        const newDrugItem = document.createElement('div');
        newDrugItem.className = 'drug-item';
        newDrugItem.innerHTML = `
            <div class="drug-header">
                <h6><i class="fas fa-capsules"></i> Thu·ªëc #${drugCounter}</h6>
                <button type="button" class="btn-remove-drug" onclick="window.removeDrugPrescription(this)" title="X√≥a thu·ªëc n√†y">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="drug-content">
                <div class="record-grid">
                    <div class="record-section">
                        <label><i class="fas fa-pills"></i> T√™n thu·ªëc:</label>
                        <input type="text" placeholder="Nh·∫≠p t√™n thu·ªëc..." value="" id="drugName${drugCounter}" class="form-control">
                    </div>
                    <div class="record-section">
                        <label><i class="fas fa-weight"></i> H√†m l∆∞·ª£ng:</label>
                        <input type="text" placeholder="V√≠ d·ª•: 5mg" value="" id="dosage${drugCounter}" class="form-control">
                    </div>
                </div>
                <div class="record-grid">
                    <div class="record-section">
                        <label><i class="fas fa-clock"></i> T·∫ßn su·∫•t s·ª≠ d·ª•ng:</label>
                        <select id="frequency${drugCounter}" class="form-control">
                            <option value="1 l·∫ßn/ng√†y">1 l·∫ßn/ng√†y</option>
                            <option value="2 l·∫ßn/ng√†y">2 l·∫ßn/ng√†y</option>
                            <option value="3 l·∫ßn/ng√†y">3 l·∫ßn/ng√†y</option>
                            <option value="1 l·∫ßn/2 ng√†y">1 l·∫ßn/2 ng√†y</option>
                            <option value="1 l·∫ßn/tu·∫ßn">1 l·∫ßn/tu·∫ßn</option>
                            <option value="Khi c·∫ßn">Khi c·∫ßn</option>
                        </select>
                    </div>
                    <div class="record-section">
                        <label><i class="fas fa-calendar-days"></i> Th·ªùi gian d√πng:</label>
                        <input type="text" placeholder="V√≠ d·ª•: 30 ng√†y" value="" id="duration${drugCounter}" class="form-control">
                    </div>
                </div>
                <div class="record-grid">
                    <div class="record-section">
                        <label><i class="fas fa-utensils"></i> Th·ªùi ƒëi·ªÉm u·ªëng:</label>
                        <select id="timing${drugCounter}" class="form-control">
                            <option value="Sau b·ªØa ƒÉn">Sau b·ªØa ƒÉn</option>
                            <option value="Tr∆∞·ªõc b·ªØa ƒÉn">Tr∆∞·ªõc b·ªØa ƒÉn</option>
                            <option value="Trong b·ªØa ƒÉn">Trong b·ªØa ƒÉn</option>
                            <option value="L√∫c ƒë√≥i">L√∫c ƒë√≥i</option>
                            <option value="Tr∆∞·ªõc khi ng·ªß">Tr∆∞·ªõc khi ng·ªß</option>
                            <option value="S√°ng s·ªõm">S√°ng s·ªõm</option>
                        </select>
                    </div>
                    <div class="record-section">
                        <label><i class="fas fa-box"></i> S·ªë l∆∞·ª£ng:</label>
                        <input type="number" placeholder="S·ªë vi√™n/g√≥i" value="" id="quantity${drugCounter}" class="form-control">
                    </div>
                </div>
                <div class="record-section">
                    <label><i class="fas fa-comment-medical"></i> H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</label>
                    <textarea rows="2" placeholder="Ghi ch√∫ c√°ch s·ª≠ d·ª•ng thu·ªëc..." id="drugNote${drugCounter}" class="form-control"></textarea>
                </div>
                <div class="record-section">
                    <label><i class="fas fa-exclamation-triangle"></i> L∆∞u √Ω ƒë·∫∑c bi·ªát:</label>
                    <textarea rows="2" placeholder="C√°c l∆∞u √Ω, t√°c d·ª•ng ph·ª•, t∆∞∆°ng t√°c thu·ªëc..." id="specialNote${drugCounter}" class="form-control"></textarea>
                </div>
            </div>
        `;
        
        drugsList.appendChild(newDrugItem);
        
        // Add animation
        newDrugItem.style.opacity = '0';
        newDrugItem.style.transform = 'translateY(20px)';
        setTimeout(() => {
            newDrugItem.style.transition = 'all 0.3s ease';
            newDrugItem.style.opacity = '1';
            newDrugItem.style.transform = 'translateY(0)';
        }, 10);
        
        updatePrescriptionSummary();
        
        console.log(`Added prescription drug #${drugCounter}`);
    };
    
    // Remove drug function for prescription
    window.removeDrugPrescription = function(button) {
        const drugItem = button.closest('.drug-item');
        if (!drugItem) return;
        
        // Confirm deletion
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a thu·ªëc n√†y?')) {
            drugItem.style.transition = 'all 0.3s ease';
            drugItem.style.opacity = '0';
            drugItem.style.transform = 'translateX(-20px)';
            
            setTimeout(() => {
                drugItem.remove();
                updatePrescriptionSummary();
                renumberDrugs();
                console.log('Prescription drug removed successfully');
            }, 300);
        }
    };
    
    // Renumber drugs after deletion
    function renumberDrugs() {
        const drugItems = document.querySelectorAll('#prescriptionTab .drug-item');
        drugItems.forEach((item, index) => {
            const header = item.querySelector('.drug-header h6');
            if (header) {
                header.innerHTML = `<i class="fas fa-capsules"></i> Thu·ªëc #${index + 1}`;
            }
        });
    }
    
    // Update prescription summary
    function updatePrescriptionSummary() {
        const drugItems = document.querySelectorAll('#prescriptionTab .drug-item');
        const drugCount = drugItems.length;
        
        // Update drug count
        const statItems = document.querySelectorAll('#prescriptionTab .stat-item .stat-number');
        if (statItems[0]) {
            statItems[0].textContent = drugCount;
        }
        
        // Calculate total quantity
        let totalQuantity = 0;
        drugItems.forEach(item => {
            const quantityInput = item.querySelector('input[id*="quantity"]');
            if (quantityInput && quantityInput.value) {
                totalQuantity += parseInt(quantityInput.value) || 0;
            }
        });
        
        if (statItems[2]) {
            statItems[2].textContent = totalQuantity;
        }
    }
    
    // Save prescription function
    window.savePrescription = function() {
        console.log('üíæ Saving prescription...');
        
        // Show loading state
        const saveBtn = document.querySelector('#prescriptionTab .prescription-actions .btn-primary');
        if (saveBtn) {
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang l∆∞u...';
            saveBtn.disabled = true;
            
            // Simulate save process
            setTimeout(() => {
                // Collect prescription data
                const prescriptionData = collectPrescriptionData();
                
                // Save to localStorage (or send to server)
                savePrescriptionToStorage(prescriptionData);
                
                // Restore button
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
                
                // Show success message
                alert('ƒê∆°n thu·ªëc ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
                
                console.log('‚úÖ Prescription saved successfully');
            }, 1500);
        }
    };
    
    // Print prescription function
    window.printPrescription = function() {
        console.log('üñ®Ô∏è Printing prescription...');
        
        const prescriptionData = collectPrescriptionData();
        const patientName = document.getElementById('patientName')?.textContent || 'Kh√¥ng x√°c ƒë·ªãnh';
        
        // Create printable content
        const printContent = `
            <html>
            <head>
                <title>ƒê∆°n thu·ªëc - ${patientName}</title>
                <style>
                    body { 
                        font-family: 'Times New Roman', serif; 
                        margin: 20px; 
                        line-height: 1.5;
                    }
                    .header { 
                        text-align: center; 
                        margin-bottom: 30px; 
                        border-bottom: 2px solid #333;
                        padding-bottom: 20px;
                    }
                    .clinic-info {
                        text-align: center;
                        margin-bottom: 10px;
                    }
                    .clinic-name {
                        font-size: 18px;
                        font-weight: bold;
                        color: #333;
                    }
                    .clinic-address {
                        font-size: 12px;
                        color: #666;
                    }
                    .prescription-title {
                        font-size: 20px;
                        font-weight: bold;
                        margin: 20px 0;
                        text-transform: uppercase;
                    }
                    .patient-info {
                        margin-bottom: 20px;
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                    }
                    .info-item {
                        margin-bottom: 8px;
                    }
                    .label { 
                        font-weight: bold; 
                        display: inline-block;
                        min-width: 120px;
                    }
                    .drugs-list {
                        margin: 20px 0;
                    }
                    .drug-item {
                        margin-bottom: 15px;
                        padding: 10px;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                    }
                    .drug-name {
                        font-weight: bold;
                        font-size: 14px;
                        margin-bottom: 5px;
                    }
                    .drug-details {
                        font-size: 12px;
                        color: #555;
                        margin-left: 20px;
                    }
                    .signature-section {
                        margin-top: 40px;
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 40px;
                    }
                    .signature-box {
                        text-align: center;
                        margin-top: 20px;
                    }
                    .signature-line {
                        border-top: 1px solid #333;
                        margin-top: 40px;
                        padding-top: 5px;
                    }
                    .notes {
                        margin: 20px 0;
                        padding: 15px;
                        background: #f9f9f9;
                        border-left: 4px solid #007bff;
                    }
                    .print-date {
                        font-size: 10px;
                        color: #999;
                        text-align: right;
                        margin-top: 20px;
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <div class="clinic-info">
                        <div class="clinic-name">PH√íNG KH√ÅM CHUY√äN KHOA HI·∫æM MU·ªòN</div>
                        <div class="clinic-address">ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM | ƒêT: (028) 1234 5678</div>
                    </div>
                    <div class="prescription-title">ƒê∆°n thu·ªëc</div>
                </div>
                
                <div class="patient-info">
                    <div>
                        <div class="info-item">
                            <span class="label">H·ªç t√™n:</span> ${patientName}
                        </div>
                        <div class="info-item">
                            <span class="label">Ng√†y sinh:</span> ${document.getElementById('patientBirthDate')?.textContent || ''}
                        </div>
                        <div class="info-item">
                            <span class="label">Gi·ªõi t√≠nh:</span> ${document.getElementById('patientGender')?.textContent || ''}
                        </div>
                    </div>
                    <div>
                        <div class="info-item">
                            <span class="label">S·ªë ƒë∆°n:</span> ${prescriptionData.prescriptionNumber}
                        </div>
                        <div class="info-item">
                            <span class="label">Ng√†y k√™:</span> ${prescriptionData.prescriptionDate}
                        </div>
                        <div class="info-item">
                            <span class="label">B√°c sƒ©:</span> ${prescriptionData.doctorName}
                        </div>
                    </div>
                </div>
                
                <div class="info-item">
                    <span class="label">Ch·∫©n ƒëo√°n:</span> ${prescriptionData.diagnosis}
                </div>
                
                <div class="drugs-list">
                    <h4>Danh s√°ch thu·ªëc:</h4>
                    ${prescriptionData.drugs.map((drug, index) => `
                        <div class="drug-item">
                            <div class="drug-name">${index + 1}. ${drug.name} ${drug.dosage}</div>
                            <div class="drug-details">
                                - S·ªë l∆∞·ª£ng: ${drug.quantity} vi√™n/g√≥i<br>
                                - C√°ch d√πng: ${drug.frequency}, ${drug.timing}<br>
                                - Th·ªùi gian: ${drug.duration}<br>
                                - H∆∞·ªõng d·∫´n: ${drug.instructions}<br>
                                ${drug.specialNotes ? `- L∆∞u √Ω: ${drug.specialNotes}` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div class="notes">
                    <strong>L·ªùi d·∫∑n c·ªßa b√°c sƒ©:</strong><br>
                    ${prescriptionData.generalNotes}
                </div>
                
                <div class="info-item">
                    <span class="label">T√°i kh√°m:</span> ${prescriptionData.nextAppointment}
                </div>
                
                <div class="signature-section">
                    <div class="signature-box">
                        <div>Ng∆∞·ªùi nh·∫≠n thu·ªëc</div>
                        <div class="signature-line">(K√Ω, ghi r√µ h·ªç t√™n)</div>
                    </div>
                    <div class="signature-box">
                        <div>B√°c sƒ© k√™ ƒë∆°n</div>
                        <div class="signature-line">${prescriptionData.doctorName}</div>
                    </div>
                </div>
                
                <div class="print-date">
                    Ng√†y in: ${new Date().toLocaleDateString('vi-VN')} ${new Date().toLocaleTimeString('vi-VN')}
                </div>
            </body>
            </html>
        `;
        
        // Open print window
        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.print();
    };
    
    // Preview prescription function
    window.previewPrescription = function() {
        console.log('üëÅÔ∏è Previewing prescription...');
        
        const prescriptionData = collectPrescriptionData();
        
        // Create preview modal (simplified version)
        const previewContent = `
            <div style="max-width: 600px; margin: 20px auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background: white;">
                <h3 style="text-align: center; margin-bottom: 20px;">Xem tr∆∞·ªõc ƒë∆°n thu·ªëc</h3>
                
                <div style="margin-bottom: 15px;">
                    <strong>B·ªánh nh√¢n:</strong> ${document.getElementById('patientName')?.textContent || 'Kh√¥ng x√°c ƒë·ªãnh'}
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>Ch·∫©n ƒëo√°n:</strong> ${prescriptionData.diagnosis}
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>Danh s√°ch thu·ªëc:</strong>
                    <ul style="margin-left: 20px;">
                        ${prescriptionData.drugs.map((drug, index) => `
                            <li style="margin-bottom: 10px;">
                                <strong>${drug.name} ${drug.dosage}</strong><br>
                                ${drug.frequency}, ${drug.timing}, ${drug.duration}<br>
                                <em>${drug.instructions}</em>
                            </li>
                        `).join('')}
                    </ul>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <strong>L·ªùi d·∫∑n:</strong> ${prescriptionData.generalNotes}
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <button onclick="this.parentElement.parentElement.remove()" style="padding: 8px 16px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">ƒê√≥ng</button>
                </div>
            </div>
        `;
        
        // Create overlay
        const overlay = document.createElement('div');
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
        `;
        overlay.innerHTML = previewContent;
        
        overlay.addEventListener('click', function(e) {
            if (e.target === overlay) {
                overlay.remove();
            }
        });
        
        document.body.appendChild(overlay);
    };
    
    // Collect prescription data from form
    function collectPrescriptionData() {
        const drugs = [];
        const drugItems = document.querySelectorAll('#prescriptionTab .drug-item');
        
        drugItems.forEach((item, index) => {
            const drugName = item.querySelector('input[id*="drugName"]')?.value || '';
            const dosage = item.querySelector('input[id*="dosage"]')?.value || '';
            const frequency = item.querySelector('select[id*="frequency"]')?.value || '';
            const duration = item.querySelector('input[id*="duration"]')?.value || '';
            const timing = item.querySelector('select[id*="timing"]')?.value || '';
            const quantity = item.querySelector('input[id*="quantity"]')?.value || '';
            const instructions = item.querySelector('textarea[id*="drugNote"]')?.value || '';
            const specialNotes = item.querySelector('textarea[id*="specialNote"]')?.value || '';
            
            if (drugName) { // Only add if drug name is provided
                drugs.push({
                    name: drugName,
                    dosage: dosage,
                    frequency: frequency,
                    duration: duration,
                    timing: timing,
                    quantity: quantity,
                    instructions: instructions,
                    specialNotes: specialNotes
                });
            }
        });
        
        return {
            prescriptionNumber: document.getElementById('prescriptionDate')?.value.replace(/-/g, '') + '001' || 'DT' + Date.now(),
            prescriptionDate: document.getElementById('prescriptionDate')?.value || new Date().toISOString().split('T')[0],
            doctorName: 'BS. Nguy·ªÖn Ng·ªçc Kh√°nh Linh',
            diagnosis: document.getElementById('prescriptionDiagnosis')?.value || '',
            treatmentDuration: document.getElementById('treatmentDuration')?.value || '30',
            drugs: drugs,
            generalNotes: document.getElementById('generalNotes')?.value || '',
            nextAppointment: document.getElementById('nextAppointment')?.value || ''
        };
    }
    
    // Save prescription to localStorage
    function savePrescriptionToStorage(prescriptionData) {
        const patientId = getCurrentPatientId(); 
        if (patientId) {
            const storageKey = `prescription_${patientId}_${Date.now()}`;
            localStorage.setItem(storageKey, JSON.stringify(prescriptionData));
            console.log(`Prescription saved to localStorage with key: ${storageKey}`);
        }
    }
    
    // Get current patient ID from modal
    function getCurrentPatientId() {
        const patientIdElement = document.getElementById('patientId');
        if (patientIdElement) {
            const patientIdText = patientIdElement.textContent;
            const match = patientIdText.match(/BN(\d+)/);
            if (match) {
                const cusId = parseInt(match[1]);
                // Find patient by cusId in patientData
                for (const [key, patient] of Object.entries(patientData)) {
                    if (patient.cusId === cusId) {
                        return key;
                    }
                }
            }
        }
        return null;
    }
    
    // Add event listeners for real-time updates
    document.addEventListener('input', function(e) {
        if (e.target.closest('#prescriptionTab')) {
            updatePrescriptionSummary();
        }
    });

});