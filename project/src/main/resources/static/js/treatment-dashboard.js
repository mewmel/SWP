// Treatment Dashboard JavaScript
// Hi·ªÉn th·ªã th√¥ng tin ƒëi·ªÅu tr·ªã active tr√™n dashboard

document.addEventListener('DOMContentLoaded', function() {
    loadActiveTreatmentInfo();
});

async function loadActiveTreatmentInfo() {
    try {
        const cusId = localStorage.getItem('cusId') || sessionStorage.getItem('cusId');
        
        if (!cusId) {
            console.log('Kh√¥ng t√¨m th·∫•y cusId trong localStorage');
            showNoTreatmentInfo();
            return;
        }

        console.log('üîç Loading active treatment info for cusId:', cusId);
        
        const response = await fetch(`/api/medical-records/active-treatment/${cusId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Active treatment data loaded:', data);
        
        if (data.hasActiveTreatment) {
            // N·∫øu c√≥ medical record active, t√¨m booking ƒë·ªÉ l·∫•y chi ti·∫øt ƒëi·ªÅu tr·ªã
            await loadDetailedTreatmentInfo(data);
        } else {
            showNoTreatmentInfo();
        }
        
    } catch (error) {
        console.error('‚ùå Error loading active treatment info:', error);
        showNoTreatmentInfo();
    }
}

// Function m·ªõi ƒë·ªÉ load chi ti·∫øt ƒëi·ªÅu tr·ªã gi·ªëng nh∆∞ modal
async function loadDetailedTreatmentInfo(basicData) {
    try {
        // Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n tr∆∞·ªõc
        displayBasicTreatmentInfo(basicData);
        
        // N·∫øu c√≥ treatmentProgress t·ª´ API medical-records, s·ª≠ d·ª•ng lu√¥n
        if (basicData.treatmentProgress && basicData.treatmentProgress.subServiceDetails) {
            console.log('‚úÖ Using treatment progress from medical-records API');
            displayDetailedTreatmentInfo(basicData.treatmentProgress);
            return;
        }
        
        // N·∫øu kh√¥ng c√≥, th·ª≠ l·∫•y t·ª´ API booking-steps nh∆∞ modal
        if (basicData.treatmentProgress && basicData.treatmentProgress.subServiceDetails && basicData.treatmentProgress.subServiceDetails.length > 0) {
            // T√¨m booking ID t·ª´ d·ªØ li·ªáu c√≥ s·∫µn
            const bookIds = await findBookingIds(basicData);
            
            if (bookIds && bookIds.length > 0) {
                console.log('üîç Loading detailed treatment using booking-steps API with bookId:', bookIds[0]);
                
                // S·ª≠ d·ª•ng API gi·ªëng nh∆∞ modal
                const response = await fetch(`/api/booking-steps/treatment-progress/${bookIds[0]}`);
                if (response.ok) {
                    const treatmentProgressData = await response.json();
                    console.log('‚úÖ Detailed treatment data from booking-steps:', treatmentProgressData);
                    
                    if (treatmentProgressData && treatmentProgressData.subServiceDetails) {
                        displayDetailedTreatmentInfo(treatmentProgressData);
                        return;
                    }
                }
            }
        }
        
        // Fallback: Hi·ªÉn th·ªã v·ªõi d·ªØ li·ªáu c√≥ s·∫µn ho·∫∑c th√¥ng b√°o kh√¥ng c√≥
        if (basicData.treatmentProgress) {
            displayDetailedTreatmentInfo(basicData.treatmentProgress);
        } else {
            showNoDetailedTreatmentInfo();
        }
        
    } catch (error) {
        console.error('‚ùå Error loading detailed treatment info:', error);
        showNoDetailedTreatmentInfo();
    }
}

// Helper function ƒë·ªÉ t√¨m booking IDs
async function findBookingIds(medicalRecordData) {
    try {
        if (medicalRecordData.recordId) {
            const response = await fetch(`/api/medical-record-booking/by-record/${medicalRecordData.recordId}`);
            if (response.ok) {
                const bookings = await response.json();
                return bookings.map(b => b.bookId);
            }
        }
        return [];
    } catch (error) {
        console.error('Error finding booking IDs:', error);
        return [];
    }
}

// Function ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
function displayBasicTreatmentInfo(data) {
    // C·∫≠p nh·∫≠t t√™n ƒëi·ªÅu tr·ªã tr√™n overview cards
    const treatmentNameElements = document.querySelectorAll('.dashboard-treatment-name');
    treatmentNameElements.forEach(element => {
        if (data.serviceName) {
            element.textContent = data.serviceName;
        } else {
            element.textContent = 'ƒêi·ªÅu tr·ªã IVF';
        }
    });

    // C·∫≠p nh·∫≠t th√¥ng tin trong sidebar
    updateSidebarTreatmentInfo(data);
    
    // C·∫≠p nh·∫≠t th√¥ng tin ng√†y ti·∫øp theo
    updateNextEventInfo(data);
}

function displayTreatmentInfo(data) {
    // Function n√†y gi·ªù ch·ªâ g·ªçi displayBasicTreatmentInfo
    displayBasicTreatmentInfo(data);
    
    // Chi ti·∫øt ƒëi·ªÅu tr·ªã s·∫Ω ƒë∆∞·ª£c load ri√™ng trong loadDetailedTreatmentInfo
    if (data.treatmentProgress) {
        updateTreatmentProgress(data.treatmentProgress);
        displayDetailedTreatmentInfo(data.treatmentProgress);
    }
}

// Function ƒë·ªÉ hi·ªÉn th·ªã khi kh√¥ng c√≥ chi ti·∫øt ƒëi·ªÅu tr·ªã
function showNoDetailedTreatmentInfo() {
    // C·∫≠p nh·∫≠t section chi ti·∫øt ƒëi·ªÅu tr·ªã v·ªõi th√¥ng b√°o
    document.getElementById('totalSubServices').textContent = '0';
    document.getElementById('completedSubServices').textContent = '0';
    document.getElementById('pendingSubServices').textContent = '0';
    document.getElementById('inactiveSubServices').textContent = '0';
    document.getElementById('treatmentProgressPercentage').textContent = '0%';
    document.getElementById('treatmentProgressFill').style.width = '0%';
    
    const stepsContent = document.getElementById('treatmentStepsContent');
    if (stepsContent) {
        stepsContent.innerHTML = `
            <div class="treatment-empty">
                <i class="fas fa-clipboard-list"></i>
                <h3>Ch∆∞a c√≥ chi ti·∫øt ƒëi·ªÅu tr·ªã</h3>
                <p>Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã. C√≥ th·ªÉ b·ªánh nh√¢n ch∆∞a c√≥ booking ho·∫∑c ch∆∞a c√≥ c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã ƒë∆∞·ª£c thi·∫øt l·∫≠p.</p>
            </div>
        `;
    }
}

// Function m·ªõi ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt ƒëi·ªÅu tr·ªã
function displayDetailedTreatmentInfo(progress) {
    // C·∫≠p nh·∫≠t c√°c s·ªë li·ªáu th·ªëng k√™
    document.getElementById('totalSubServices').textContent = progress.totalSubServices || 0;
    document.getElementById('completedSubServices').textContent = progress.completedSubServices || 0;
    document.getElementById('pendingSubServices').textContent = progress.pendingSubServices || 0;
    document.getElementById('inactiveSubServices').textContent = progress.inactiveSubServices || 0;
    
    // C·∫≠p nh·∫≠t progress bar c·ªßa section chi ti·∫øt
    const percentage = progress.progressPercentage || 0;
    document.getElementById('treatmentProgressPercentage').textContent = `${percentage}%`;
    document.getElementById('treatmentProgressFill').style.width = `${percentage}%`;
    
    // Hi·ªÉn th·ªã c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã chi ti·∫øt
    renderDetailedTreatmentSteps(progress.subServiceDetails || []);
}

// Function ƒë·ªÉ render c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã chi ti·∫øt
function renderDetailedTreatmentSteps(subServiceDetails) {
    const stepsContent = document.getElementById('treatmentStepsContent');
    
    if (!subServiceDetails || subServiceDetails.length === 0) {
        stepsContent.innerHTML = `
            <div class="treatment-empty">
                <i class="fas fa-clipboard-list"></i>
                <h3>Ch∆∞a c√≥ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã</h3>
                <p>B·ªánh nh√¢n ch∆∞a c√≥ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.</p>
            </div>
        `;
        return;
    }
    
    let stepsHtml = '';
    
    subServiceDetails.forEach((step, index) => {
        const stepNumber = index + 1;
        let statusClass = '';
        let statusText = '';
        
        switch (step.stepStatus) {
            case 'completed':
                statusClass = 'completed';
                statusText = 'Ho√†n th√†nh';
                break;
            case 'pending':
                statusClass = 'current';
                statusText = 'ƒêang th·ª±c hi·ªán';
                break;
            default:
                statusClass = 'pending';
                statusText = 'Ch·ªù th·ª±c hi·ªán';
        }
        
        stepsHtml += `
            <div class="treatment-step-item ${statusClass}">
                <div class="treatment-step-number">
                    <div class="step-number">${stepNumber}</div>
                    <div class="step-status-text">${statusText}</div>
                </div>
                <div class="treatment-step-content">
                    <div class="step-name">${step.subName || `B∆∞·ªõc ${stepNumber}`}</div>
                    <div class="step-description">${step.subDescription || 'ƒêang th·ª±c hi·ªán theo k·∫ø ho·∫°ch'}</div>
                    ${step.performedAt ? `<div class="step-date">Th·ªùi gian: ${formatDate(step.performedAt)}</div>` : ''}
                    ${step.stepResult ? `<div class="step-result"><strong>K·∫øt qu·∫£:</strong> ${formatStepResult(step.stepResult)}</div>` : ''}
                    ${step.stepNote ? `<div class="step-note"><strong>Ghi ch√∫:</strong> ${step.stepNote}</div>` : ''}
                </div>
            </div>
        `;
    });
    
    stepsContent.innerHTML = stepsHtml;
}

function updateTreatmentProgress(progress) {
    // C·∫≠p nh·∫≠t progress bar
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (progressFill && progressText) {
        const percentage = progress.progressPercentage || 0;
        progressFill.style.width = `${percentage}%`;
        progressText.textContent = `${percentage}% ho√†n th√†nh`;
    }

    // C·∫≠p nh·∫≠t timeline v·ªõi sub-service details
    if (progress.subServiceDetails && progress.subServiceDetails.length > 0) {
        updateTimelineWithTreatmentSteps(progress.subServiceDetails);
    }

    // Hi·ªÉn th·ªã th·ªëng k√™ trong ph·∫ßn quick actions ho·∫∑c t·∫°o section m·ªõi
    displayTreatmentStats(progress);
}

function updateTimelineWithTreatmentSteps(subServiceDetails) {
    const timelineWeek = document.getElementById('timeline-week');
    const timelineLegend = document.getElementById('timeline-legend');
    
    if (!timelineWeek) return;

    // Clear existing timeline
    timelineWeek.innerHTML = '';
    
    // T·∫°o timeline items t·ª´ sub-service details
    let timelineHtml = '<div class="treatment-steps-timeline">';
    
    subServiceDetails.forEach((step, index) => {
        const stepNumber = index + 1;
        let statusClass = '';
        let statusIcon = '';
        
        switch (step.stepStatus) {
            case 'completed':
                statusClass = 'completed';
                statusIcon = '‚úÖ';
                break;
            case 'pending':
                statusClass = 'current';
                statusIcon = 'üîÑ';
                break;
            default:
                statusClass = 'upcoming';
                statusIcon = '‚è≥';
        }
        
        timelineHtml += `
            <div class="timeline-step ${statusClass}">
                <div class="step-marker">
                    <span class="step-number">${stepNumber}</span>
                    <span class="step-icon">${statusIcon}</span>
                </div>
                <div class="step-content">
                    <div class="step-title">${step.subName || `B∆∞·ªõc ${stepNumber}`}</div>
                    <div class="step-description">${step.subDescription || 'ƒêang th·ª±c hi·ªán theo k·∫ø ho·∫°ch'}</div>
                    ${step.performedAt ? `<div class="step-date">${formatDate(step.performedAt)}</div>` : ''}
                </div>
            </div>
        `;
    });
    
    timelineHtml += '</div>';
    timelineWeek.innerHTML = timelineHtml;
    
    // C·∫≠p nh·∫≠t legend
    if (timelineLegend) {
        timelineLegend.innerHTML = `
            <div class="legend-item">
                <span class="legend-dot completed"></span>
                <span>Ho√†n th√†nh (${subServiceDetails.filter(s => s.stepStatus === 'completed').length})</span>
            </div>
            <div class="legend-item">
                <span class="legend-dot current"></span>
                <span>ƒêang th·ª±c hi·ªán (${subServiceDetails.filter(s => s.stepStatus === 'pending').length})</span>
            </div>
            <div class="legend-item">
                <span class="legend-dot upcoming"></span>
                <span>S·∫Øp t·ªõi (${subServiceDetails.filter(s => s.stepStatus === 'inactive').length})</span>
            </div>
        `;
    }
}

function displayTreatmentStats(progress) {
    // T√¨m ho·∫∑c t·∫°o section ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™ ƒëi·ªÅu tr·ªã
    let statsSection = document.querySelector('.treatment-stats-section');
    
    if (!statsSection) {
        // T·∫°o section m·ªõi n·∫øu ch∆∞a c√≥
        statsSection = document.createElement('section');
        statsSection.className = 'treatment-stats-section';
        statsSection.innerHTML = `
            <h3>üìä Th·ªëng k√™ ƒëi·ªÅu tr·ªã</h3>
            <div class="stats-grid" id="treatmentStatsGrid"></div>
        `;
        
        // Ch√®n sau ph·∫ßn overview
        const overviewSection = document.querySelector('.dashboard-overview');
        if (overviewSection && overviewSection.nextSibling) {
            overviewSection.parentNode.insertBefore(statsSection, overviewSection.nextSibling);
        }
    }
    
    const statsGrid = document.getElementById('treatmentStatsGrid');
    if (statsGrid) {
        statsGrid.innerHTML = `
            <div class="stat-card">
                <div class="stat-number">${progress.totalSubServices}</div>
                <div class="stat-label">T·ªïng b∆∞·ªõc</div>
                <div class="stat-icon">üìã</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${progress.completedSubServices}</div>
                <div class="stat-label">Ho√†n th√†nh</div>
                <div class="stat-icon">‚úÖ</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${progress.pendingSubServices}</div>
                <div class="stat-label">ƒêang th·ª±c hi·ªán</div>
                <div class="stat-icon">üîÑ</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${progress.inactiveSubServices}</div>
                <div class="stat-label">S·∫Øp t·ªõi</div>
                <div class="stat-icon">‚è≥</div>
            </div>
        `;
    }
}

function updateSidebarTreatmentInfo(data) {
    // C·∫≠p nh·∫≠t th√¥ng tin trong sidebar "Th√¥ng tin ƒëi·ªÅu tr·ªã"
    const treatmentInfoSidebar = document.getElementById('treatmentInfoSidebar');
    
    if (treatmentInfoSidebar) {
        treatmentInfoSidebar.innerHTML = `
            <div class="info-row">
                <span class="info-label">T√¨nh tr·∫°ng:</span>
                <span class="info-value">${getStatusText(data.recordStatus)}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Ch·∫©n ƒëo√°n:</span>
                <span class="info-value">${data.diagnosis || 'Ch∆∞a c√≥'}</span>
            </div>
            <div class="info-row">
                <span class="info-label">B√°c sƒ© ph·ª• tr√°ch:</span>
                <span class="info-value">${data.doctorName || 'Ch∆∞a x√°c ƒë·ªãnh'}</span>
            </div>
            <div class="info-row">
                <span class="info-label">D·ªãch v·ª•:</span>
                <span class="info-value">${data.serviceName || 'Ch∆∞a x√°c ƒë·ªãnh'}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Ng√†y b·∫Øt ƒë·∫ßu:</span>
                <span class="info-value">${formatDate(data.createdAt)}</span>
            </div>
            ${data.dischargeDate ? `
            <div class="info-row">
                <span class="info-label">Ng√†y d·ª± ki·∫øn k·∫øt th√∫c:</span>
                <span class="info-value">${formatDate(data.dischargeDate)}</span>
            </div>` : ''}
        `;
    }
}

function updateNextEventInfo(data) {
    // T√¨m s·ª± ki·ªán ti·∫øp theo t·ª´ treatmentProgress
    if (data.treatmentProgress && data.treatmentProgress.subServiceDetails) {
        const nextEvent = data.treatmentProgress.subServiceDetails.find(step => 
            step.stepStatus === 'pending' || step.stepStatus === 'inactive'
        );
        
        if (nextEvent) {
            const nextEventDateElements = document.querySelectorAll('.dashboard-next-event-date');
            const nextEventTypeElements = document.querySelectorAll('.dashboard-next-event-type');
            
            nextEventDateElements.forEach(element => {
                if (nextEvent.performedAt) {
                    const date = new Date(nextEvent.performedAt);
                    element.textContent = `${date.getDate()}/${date.getMonth() + 1}`;
                } else {
                    element.textContent = 'TBD';
                }
            });
            
            nextEventTypeElements.forEach(element => {
                element.textContent = nextEvent.subName || 'S·ª± ki·ªán ti·∫øp theo';
            });
        }
    }
}

function showNoTreatmentInfo() {
    // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ ƒëi·ªÅu tr·ªã active
    const treatmentNameElements = document.querySelectorAll('.dashboard-treatment-name');
    treatmentNameElements.forEach(element => {
        element.textContent = 'Ch∆∞a c√≥ ƒëi·ªÅu tr·ªã';
    });
    
    const nextEventDateElements = document.querySelectorAll('.dashboard-next-event-date');
    const nextEventTypeElements = document.querySelectorAll('.dashboard-next-event-type');
    
    nextEventDateElements.forEach(element => {
        element.textContent = '--';
    });
    
    nextEventTypeElements.forEach(element => {
        element.textContent = 'Ch∆∞a c√≥ l·ªãch h·∫πn';
    });
    
    // C·∫≠p nh·∫≠t progress bar
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (progressFill && progressText) {
        progressFill.style.width = '0%';
        progressText.textContent = 'Ch∆∞a b·∫Øt ƒë·∫ßu ƒëi·ªÅu tr·ªã';
    }
    
    // C·∫≠p nh·∫≠t sidebar
    const treatmentInfoSidebar = document.getElementById('treatmentInfoSidebar');
    if (treatmentInfoSidebar) {
        treatmentInfoSidebar.innerHTML = `
            <div class="info-row">
                <span class="info-label">T√¨nh tr·∫°ng:</span>
                <span class="info-value">Ch∆∞a c√≥ ƒëi·ªÅu tr·ªã</span>
            </div>
            <div class="info-row">
                <span class="info-label">Ch·∫©n ƒëo√°n:</span>
                <span class="info-value">Ch∆∞a c√≥</span>
            </div>
            <div class="info-row">
                <span class="info-label">B√°c sƒ© ph·ª• tr√°ch:</span>
                <span class="info-value">Ch∆∞a c√≥</span>
            </div>
        `;
    }
    
    // C·∫≠p nh·∫≠t section chi ti·∫øt ƒëi·ªÅu tr·ªã
    document.getElementById('totalSubServices').textContent = '0';
    document.getElementById('completedSubServices').textContent = '0';
    document.getElementById('pendingSubServices').textContent = '0';
    document.getElementById('inactiveSubServices').textContent = '0';
    document.getElementById('treatmentProgressPercentage').textContent = '0%';
    document.getElementById('treatmentProgressFill').style.width = '0%';
    
    const stepsContent = document.getElementById('treatmentStepsContent');
    if (stepsContent) {
        stepsContent.innerHTML = `
            <div class="treatment-empty">
                <i class="fas fa-clipboard-list"></i>
                <h3>Ch∆∞a c√≥ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã</h3>
                <p>B·ªánh nh√¢n ch∆∞a c√≥ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.</p>
            </div>
        `;
    }
}

// Helper functions
function getStatusText(status) {
    switch (status) {
        case 'active':
            return 'ƒêang ƒëi·ªÅu tr·ªã';
        case 'closed':
            return 'ƒê√£ k·∫øt th√∫c';
        case 'pending':
            return 'Ch·ªù x·ª≠ l√Ω';
        default:
            return status || 'Kh√¥ng x√°c ƒë·ªãnh';
    }
}

function formatDate(dateString) {
    if (!dateString) return 'Ch∆∞a x√°c ƒë·ªãnh';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN');
    } catch (error) {
        return 'Ng√†y kh√¥ng h·ª£p l·ªá';
    }
}

// Refresh function ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ b√™n ngo√†i
window.refreshTreatmentInfo = function() {
    loadActiveTreatmentInfo();
};
