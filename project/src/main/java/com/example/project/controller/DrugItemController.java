package com.example.project.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.project.entity.Drug;
import com.example.project.entity.DrugItem;
import com.example.project.repository.DrugItemRepository;
import com.example.project.repository.DrugRepository;



@RestController
@RequestMapping("/api/drug-items")
@CrossOrigin
public class DrugItemController {

    @Autowired
    private DrugItemRepository drugItemRepository;


    @Autowired
    private DrugRepository drugRepository;


    /**
     * T·∫°o m·ªõi danh s√°ch DrugItem cho m·ªôt Drug c·ª• th·ªÉ.
     * @param drugId ID c·ªßa Drug m√† c√°c DrugItem n√†y s·∫Ω thu·ªôc v·ªÅ.
     * @param items Danh s√°ch c√°c DrugItem c·∫ßn t·∫°o m·ªõi.
     * @return ResponseEntity ch·ª©a danh s√°ch c√°c DrugItem ƒë√£ ƒë∆∞·ª£c l∆∞u.
     */
    @PostMapping("/create/{drugId}")
public ResponseEntity<?> createDrugItems(@PathVariable Integer drugId, @RequestBody List<DrugItem> items) {
    System.out.println("üîç DEBUG: Creating drug items for drugId: " + drugId);
    System.out.println("üîç DEBUG: Items to create: " + items);
    
    // Optional: ki·ªÉm tra t·ªìn t·∫°i c·ªßa Drug n·∫øu mu·ªën ch·∫Øc ƒÉn
    Optional<Drug> optionalDrug = drugRepository.findById(drugId);
    if (optionalDrug.isEmpty()) {
        System.out.println("‚ùå DEBUG: Drug not found for ID: " + drugId);
        return ResponseEntity.notFound().build();
    }

    // G√°n drugId cho t·ª´ng item tr∆∞·ªõc khi l∆∞u
    for (DrugItem item : items) {
        item.setDrugId(drugId);
    }

    List<DrugItem> savedItems = drugItemRepository.saveAll(items);
    System.out.println("‚úÖ DEBUG: Drug items created successfully: " + savedItems);
    return ResponseEntity.ok(savedItems);
}

    /**
     * X√≥a t·∫•t c·∫£ DrugItem c·ªßa m·ªôt Drug c·ª• th·ªÉ.
     * @param drugId ID c·ªßa Drug m√† c√°c DrugItem s·∫Ω b·ªã x√≥a.
     * @return ResponseEntity th√¥ng b√°o k·∫øt qu·∫£.
     */
    @DeleteMapping("/delete-by-drug/{drugId}")
    public ResponseEntity<?> deleteDrugItemsByDrugId(@PathVariable Integer drugId) {
        System.out.println("üóëÔ∏è DEBUG: Deleting drug items for drugId: " + drugId);
        
        try {
            // Ki·ªÉm tra t·ªìn t·∫°i c·ªßa Drug
            Optional<Drug> optionalDrug = drugRepository.findById(drugId);
            if (optionalDrug.isEmpty()) {
                System.out.println("‚ùå DEBUG: Drug not found for ID: " + drugId);
                return ResponseEntity.notFound().build();
            }

            // T√¨m t·∫•t c·∫£ drug items c·ªßa drug n√†y
            List<DrugItem> drugItems = drugItemRepository.findByDrugId(drugId);
            System.out.println("üîç DEBUG: Found " + drugItems.size() + " drug items to delete");
            
            // X√≥a t·ª´ng drug item
            for (DrugItem item : drugItems) {
                System.out.println("üóëÔ∏è DEBUG: Deleting drug item: " + item);
                drugItemRepository.delete(item);
            }
            
            System.out.println("‚úÖ DEBUG: All drug items deleted successfully");
            return ResponseEntity.ok("ƒê√£ x√≥a " + drugItems.size() + " drug items th√†nh c√¥ng");
            
        } catch (Exception e) {
            System.out.println("‚ùå DEBUG: Error deleting drug items: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói x√≥a drug items: " + e.getMessage());
        }
    }

}
